# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: todo-test
# app and org for use with dashboard.serverless.com
app: todo-app
org: jhchong92

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

custom:
  private: ${file(./private.yml)}

provider:
  name: aws
  runtime: nodejs12.x

  region: ap-southeast-1
  environment:
    TODO_TABLE: ${opt:stage}-ToDo

functions:
  hello:
    handler: api/todo.hello
    events:
     - http:
         path: todo/hello
         method: get
         authorizer:
          type: COGNITO_USER_POOLS
          authorizerId:
            Ref: ApiGatewayAuthorizer
  listTodos:
    handler: api/todo.list
    memorySize: 128
    role:
      Fn::GetAtt: [ ToDoReader, Arn ]
    events:
      - http:
          path: todos
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
          request:
            parameters:
              querystrings:
                url: true
  submitTask:
    handler: api/todo.submit
    memorySize: 128
    role:
      Fn::GetAtt: [ ToDoWriter, Arn ]
    events:
      - http:
          path: todos
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
  updateTaskStatus:
    handler: api/todo.update
    memorySize: 128
    role: 
      Fn::GetAtt: [ ToDoWriter, Arn ]
    events:
      - http:
          path: todos/{taskId}/status/{status}
          method: put         
          cors: true 
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
  clearCompleted:
    handler: api/todo.clearCompleted
    memorySize: 128
    role: 
      Fn::GetAtt: [ ToDoReaderWriter, Arn ]
    events:
      - http:
          path: todos/clear-completed
          method: post         
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer 
resources:
  - ${file(resources/cognito-user-pool.yml)}        
  - ${file(resources/api-authorizer.yml)}        
  - Resources:
      # Tables
      ToDo:
        Type: AWS::DynamoDB::Table
        Properties:
          AttributeDefinitions:
            - AttributeName: id
              AttributeType: S
            - AttributeName: user
              AttributeType: S
          KeySchema:
            - AttributeName: id
              KeyType: HASH
          BillingMode: PAY_PER_REQUEST
          TableName: ${opt:stage}-ToDo
          GlobalSecondaryIndexes:
            - IndexName: TasksByUser
              KeySchema: 
                - AttributeName: user
                  KeyType: HASH
              Projection:
                ProjectionType: INCLUDE
                NonKeyAttributes:
                  - id
              # BillingMode: PAY_PER_REQUEST
      ToDoReader:
        Type: AWS::IAM::Role
        Properties:
          Path: /
          RoleName: ${opt:stage}ToDoReader
          AssumeRolePolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: sts:AssumeRole
                Principal:
                  Service: lambda.amazonaws.com
          Policies:
            - PolicyName: ReadFromToDo
              PolicyDocument: 
                Version: '2012-10-17'
                Statement:
                  - Effect: Allow
                    Action: 
                      - 'dynamodb:Scan'
                    Resource:
                      Fn::Join:
                        - '/'
                        - - 'arn:aws:dynamodb:${self:custom.private.region}:${self:custom.private.accountId}:table'
                          - Ref: ToDo
      ToDoWriter:
        Type: AWS::IAM::Role
        Properties:
          Path: /
          RoleName: ${opt:stage}ToDoWriter
          AssumeRolePolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: sts:AssumeRole
                Principal:
                  Service: lambda.amazonaws.com
          Policies:
            - PolicyName: ReadFromToDo
              PolicyDocument: 
                Version: '2012-10-17'
                Statement:
                  - Effect: Allow
                    Action: 
                      - 'dynamodb:PutItem'
                      - 'dynamodb:UpdateItem'
                    Resource:
                      Fn::Join:
                        - '/'
                        - - 'arn:aws:dynamodb:${self:custom.private.region}:${self:custom.private.accountId}:table'
                          - Ref: ToDo
      ToDoReaderWriter:
        Type: AWS::IAM::Role
        Properties:
          Path: /
          RoleName: ${opt:stage}ToDoReaderWriter
          AssumeRolePolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: sts:AssumeRole
                Principal:
                  Service: lambda.amazonaws.com
          Policies:
            - PolicyName: ReadFromToDo
              PolicyDocument: 
                Version: '2012-10-17'
                Statement:
                  - Effect: Allow
                    Action: 
                      - 'dynamodb:Scan'
                      - 'dynamodb:UpdateItem'
                      - 'dynamodb:PutItem'
                    Resource:
                      Fn::Join:
                        - '/'
                        - - 'arn:aws:dynamodb:${self:custom.private.region}:${self:custom.private.accountId}:table'
                          - Ref: ToDo

